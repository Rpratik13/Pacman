import pgzrun
from pygame import *

def distanceNodes(nodes, reachable_nodes):
    dist = {}
    for i in nodes:
        selected = [i]
        dist[i] = [float('inf')] * len(nodes)
        dist[i][nodes.index(i)] = 0
        temp = i
        while len(selected) < len(nodes):
    
            for j in reachable_nodes[temp]:
                dist[i][nodes.index(j)] = min(dist[i][nodes.index(j)], dist[i][nodes.index(temp)] + abs(temp[0] - j[0]) + abs(temp[1] - j[1]))
            min_val = float('inf')
            for k in range(len(dist[i])):
                if dist[i][k] < min_val and nodes[k] not in selected:
                    temp = nodes[k]
                    min_val = dist[i][k]
            selected.append(temp)

    return dist



def reachableNodes(tiles, nodes):
    reachable_nodes = {}

    for i in nodes:
        left = (100, 100)
        right = (100, 100)
        up = (100, 100)
        down = (100, 100)
        for j in nodes:
            if i == j:
                continue

            if i[0] == j[0]:
                if tiles[i[0]][i[1] - 1] != 1:
                    if i[1] > j[1] and i[1] - j[1] < abs(left[1] - i[1]):
                        left = j
                if tiles[i[0]][i[1] + 1] != 1:
                    if i[1] < j[1] and j[1] - i[1] < abs(right[1] - i[1]):
                        right = j

            if i[1] == j[1]:
                if tiles[i[0] - 1][i[1]] != 1:
                    if i[0] > j[0] and i[0] - j[0] < abs(up[0] - i[0]):
                        up = j
                if tiles[i[0] + 1][i[1]] != 1:
                    if i[0] < j[0] and j[0] - i[0] < abs(down[0] - i[0]):
                        down = j
        reachable_nodes[i] = [left, right, up, down]
        while (100, 100) in reachable_nodes[i]:
            reachable_nodes[i].remove((100, 100))
    return reachable_nodes

class Tiles:
    def __init__(self):
        self.tiles = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
                     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], 
                     [1, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1], 
                     [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], 
                     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], 
                     [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], 
                     [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], 
                     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], 
                     [1, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1], 
                     [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], 
                     [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], 
                     [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], 
                     [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], 
                     [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], 
                     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
        self.super = [(4, 1), (22, 1), (4, 26), (22, 26)]
        self.nodes =[(1, 1), (1, 6), (1, 12), (1, 15), (1, 21), (1, 26),
         (5, 1), (5, 6), (5, 9), (5, 12), (5, 15), (5, 18), (5, 21), (5, 26),
         (8, 1), (8, 6), (8, 9), (8, 12), (8, 15), (8, 18), (8, 21), (8, 26),
         (11, 9), (11, 12), (11, 15), (11, 18),
         (14, 6), (14, 9), (14, 18), (14, 21),
         (17, 9), (17, 18),
         (20, 1), (20, 6), (20, 9), (20, 12), (20, 15), (20, 18), (20, 21), (20, 26),
         (23, 1), (23, 3), (23, 6), (23, 9), (23, 12), (23, 15), (23, 18), (23, 21), (23,24), (23, 26),
         (26, 1), (26, 3), (26, 6), (26, 9), (26, 12), (26, 15), (26, 18), (26, 21), (26, 24), (26, 26),
         (29, 1), (29, 12), (29, 15), (29, 26)]

        self.reachable_nodes = reachableNodes(self.tiles, self.nodes)
        self.node_distance = distanceNodes(self.nodes, self.reachable_nodes)

    def drawTiles(self):
        for i in range(len(self.tiles)):
            for j in range(len(self.tiles[0])):
                if self.tiles[i][j] == 0:
                    screen.draw.circle((i * 10, j * 10), 10, 'yellow')
                elif self.tiles[i][j] == 2:
                    screen.draw.circle((i * 10, j * 10), 20, 'yellow')

    def checkGame(self):
        for i in self.tiles:
            for j in i:
                if j != 3 and j != 1:
                    return False
        return True